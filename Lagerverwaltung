ackage lagerverwaltung;

import java.util.Arrays;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.IOException;

public class Lagerverwaltung {
	private int find(int id) {
		for (int i = 0; i < lager.length; i++) {
			if (lager[i][0] == id) {
				return i;
			}
		}
		return -1;
	}

	private int[][] lager;

	public Lagerverwaltung(int[][] lager) {
		this.lager = lager;
	}

	/**
	 * Mit dieser Methode fuegen wir eine neue "Kiste" ins Lager ein. Die Kiste wird
	 * durch laenge, Hoehe und Breite definiert.
	 * 
	 * @return Die Identifikationsnummer der neuen Kiste
	 * @throws LagerVollException wenn das Lager voll ist.
	 */
	int neu(int breite, int laenge, int hoehe) throws LagerVollException {
		// schritt 1: leeren lagerplatz finden
		// ^ Hier anfangen!
		int platz = find(0);
		if (platz == -1) {
			throw new LagerVollException();
		}
		// schritt 2: identifikationsnummer erstellen
		int id = platz + 1;
		// schritt 3: lager aktualisieren
		int[] kiste = new int[] { id, breite, laenge, hoehe };
		lager[platz] = kiste;
		// schritt 4: identifikationsnummer zurueckgeben
		return id;
	}

	/**
	 * Mit dieser Methode suchen wir nach eine Kiste mit der Identifikationsnummer
	 * und l�schen diese Kiste
	 * 
	 * @throws KisteUnbekanntException wenn die angegebene identifikationsnummer
	 *                                 nicht gefunden wird
	 */
	void loeschen(int identifikationsnummer) throws KisteUnbekanntException {
		// Schritt 1: Lagerplatz wird nach der zu Löschenden Kiste durchsucht
		// Schritt 2a: Kiste wird gel�scht
		// Schritt 2b: Kiste nicht gefunden? Exception werfen!
		int platz = find(identifikationsnummer);
		if (platz == -1) {
			throw new KisteUnbekanntException();
		}
		lager[platz][0] = 0;
	}

	/**
	 * Mit dieser Methode �ndern wir die Ma�e der jeweiligen Kiste
	 * 
	 * @throws KisteUnbekanntException wenn die angegebene identifikationsnummer
	 *                                 nicht gefunden wird
	 */
	void aendern(int identifikationsnummer, int breite, int laenge, int hoehe) throws KisteUnbekanntException {
		// Schritt 1: Lagerplatz der zu �ndernden Kiste durchsuchen
		// Schritt 2: Falls Kiste vorhanden Kistenma�e �ndern
		// Schritt 3: Falls Kiste nicht vorhanden Exception werfen!
		int kiste;
		if (kiste > 0 && kiste <= lager.length)
			if (lager[kiste - 1][0] != 0) {
				lager[kiste - 1][1] = breite;
				lager[kiste - 1][2] = laenge;
				lager[kiste - 1][3] = hoehe;
			} else {
				throw new KisteUnbekanntException();
			}
	}

	/**
	 * Mit dieser Methode werden die Ma�e der zu suchenden Kiste angezeigt
	 * 
	 * @param identifikationsnummer
	 * @throws KisteUnbekanntException wenn die angegebene identifikationsnummer
	 *                                 nicht gefunden wird
	 */
	int[] anzeigen(int identifikationsnummer) throws KisteUnbekanntException {
		// Schritt 1: Lager wird durchsucht
		// Schritt 2: Kistenmaße werden ausgegeben
		// Schritt 3: Falls Kiste nicht vorhanden Exception ausgeben!
		int kiste;
		for (int i = 0; i < lager.length; i++)
			if (kiste < 0 && kiste >= lager.length && lager[i][0] == kiste) {
				System.out.println("Die von Ihnen ausgewählte Kiste ist: " + Arrays.toString(lager[i]));
			} else {
				throw new Exception();
			}

	}

	/**
	 * Mit dieser Methode wird die Liste aller vorhandenen Kisten ausgegeben
	 * 
	 * @return
	 */
	int[] liste() {
		// Ausgabe aller 75 vorhandenen Kisten
		int[] lager;
		for (int i = 0; i < lager; i++) {
			if (i < 0 && i > lager && lager[0] == i) {
				System.out.println(i);
			}
		}

	}

	public static void main(String[] args) throws IOException {
		String eingabe;
		boolean run = true;
		int[][] lager = new int[75][4];
		Lagerverwaltung mylager = new Lagerverwaltung(lager); // als Konstruktorargument an lager

		while (run) {
			BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
			System.out.println("Was möchten Sie tun");
			System.out.println("neu, loeschen, aendern, anzeigen, liste");
			System.out.println("Bitte breite, laenge und hoehe eingeben:");
			System.out.print("Breite? ");
			String in = reader.readLine();
			int breite = Integer.parseInt(in);
			System.out.print("Laenge? ");
			in = reader.readLine();
			int laenge = Integer.parseInt(in);
			System.out.print("Hoehe? ");
			in = reader.readLine();
			int hoehe = Integer.parseInt(in);
			try {
				int id = Lagerverwaltung.neu(breite, laenge, hoehe);
				System.out.print("Kiste Nr " + id + " wurde gelagert");
			} catch (LagerVollException e) {
				System.out.print("Das Lager ist leider voll.");
			}
		}

	}

}
